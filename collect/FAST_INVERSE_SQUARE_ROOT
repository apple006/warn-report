ClassPathXmlApplicationContext --> AbstractXmlApplicationContext --> AbstractRefreshableConfigApplicationContext --> AbstractRefreshableApplicationContext --> AbstractApplicationContext

AbstractApplicationContext:
public AbstractApplicationContext(ApplicationContext parent) {
		this();
		setParent(parent);
	}

	this():
	public AbstractApplicationContext() {
    		this.resourcePatternResolver = getResourcePatternResolver();
    	}

    	protected ResourcePatternResolver getResourcePatternResolver() {
        		return new PathMatchingResourcePatternResolver(this);
        	}

        	static {
            		try {
            			// Detect Equinox OSGi (e.g. on WebSphere 6.1)
            			Class<?> fileLocatorClass = ClassUtils.forName("org.eclipse.core.runtime.FileLocator",
            					PathMatchingResourcePatternResolver.class.getClassLoader());
            			equinoxResolveMethod = fileLocatorClass.getMethod("resolve", URL.class);
            			logger.debug("Found Equinox FileLocator for OSGi bundle URL resolution");
            		}
            		catch (Throwable ex) {
            			equinoxResolveMethod = null;
            		}
            	}

        	public PathMatchingResourcePatternResolver(ResourceLoader resourceLoader) {
            		Assert.notNull(resourceLoader, "ResourceLoader must not be null");
            		this.resourceLoader = resourceLoader;
            	}


    public void setParent(ApplicationContext parent) {
    		this.parent = parent;
    		if (parent != null) {
    			Environment parentEnvironment = parent.getEnvironment();
    			if (parentEnvironment instanceof ConfigurableEnvironment) {
    				getEnvironment().merge((ConfigurableEnvironment) parentEnvironment);
    			}
    		}
    	}

    	public ConfigurableEnvironment getEnvironment() {
        		if (this.environment == null) {
        			this.environment = createEnvironment();
        		}
        		return this.environment;
        	}

        	protected ConfigurableEnvironment createEnvironment() {
        	        //MapPropertySource:[{systemEnvironment, System.getenv()},{systemProperties, System.getProperties()}]
        	        //Servlet : StandardServletEnvironment
            		return new StandardEnvironment();
            	}

            	public void merge(ConfigurableEnvironment parent) {
                		for (PropertySource<?> ps : parent.getPropertySources()) {
                			if (!this.propertySources.contains(ps.getName())) {
                				this.propertySources.addLast(ps);
                			}
                		}
                		for (String profile : parent.getActiveProfiles()) {
                			this.activeProfiles.add(profile);
                		}
                		//设置默认profiles为当前激活的activeProfiles，ctx.getEnvironment().setActiveProfiles("profile1", "profile2");
                		if (parent.getDefaultProfiles().length > 0) {
                			this.defaultProfiles.remove(RESERVED_DEFAULT_PROFILE_NAME);
                			for (String profile : parent.getDefaultProfiles()) {
                				this.defaultProfiles.add(profile);
                			}
                		}
                	}
                	http://edison87915.iteye.com/blog/2110258

ClassPathXmlApplicationContext :
public ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, ApplicationContext parent)
			throws BeansException {

		super(parent);
		setConfigLocations(configLocations);
		if (refresh) {
			refresh();
		}
	}

	AbstractRefreshableConfigApplicationContext
	public void setConfigLocations(String[] locations) {
    		if (locations != null) {
    			Assert.noNullElements(locations, "Config locations must not be null");
    			this.configLocations = new String[locations.length];
    			for (int i = 0; i < locations.length; i++) {
    				this.configLocations[i] = resolvePath(locations[i]).trim();
    			}
    		}
    		else {
    			this.configLocations = null;
    		}
    	}

    	public PropertyPlaceholderHelper(String placeholderPrefix, String placeholderSuffix,
        			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {

        		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null");
        		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null");
        		this.placeholderPrefix = placeholderPrefix;//"${"
        		this.placeholderSuffix = placeholderSuffix;//"}"
        		//static { wellKnownSimplePrefixes.put("}", "{"); wellKnownSimplePrefixes.put("]", "["); wellKnownSimplePrefixes.put(")", "(");}
        		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix);
        		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {
        			this.simplePrefix = simplePrefixForSuffix;
        		}
        		else {
        			this.simplePrefix = this.placeholderPrefix;
        		}
        		this.valueSeparator = valueSeparator;//":"
        		this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;//resolvePlaceholders:true,resolveRequiredPlaceholders:false
        	}

        //对配置文件中引入的properties的属性进行替换，如${jdbc.url}
        private String doResolvePlaceholders(String text, PropertyPlaceholderHelper helper) {
        		return helper.replacePlaceholders(text, new PropertyPlaceholderHelper.PlaceholderResolver() {
        			public String resolvePlaceholder(String placeholderName) {
        			    //根据key(placeholderName)查找值
        				return getPropertyAsRawString(placeholderName);
        			}
        		});
        	}
